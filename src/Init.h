//#include <i86.h>
#include <conio.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dos.h>
#include <malloc.h>
#include <math.h>

#include <pc.h>
#include <dpmi.h>
#include <sys/farptr.h>

#define outpd outportl
#define outp  outportb
#define inpd inportl
#define inp  inportb
//
// Display Resolution Information
/*
#define DRW				  1024  // display resolution width  only supports 800 /600 pixels
#define DRH				  600   // display resolution height  only supports  600 / 480 line
#define DRC				   16   // display resolution color depth only supports 8 / 16 /32 bit
 ===> Modify those define to variable as below <==== */
extern unsigned int DRW;  // display resolution width  only supports 800 /600 pixels
extern unsigned int DRH;   // display resolution height  only supports  600 / 480 line
extern unsigned int DRC;    // display resolution color depth only supports 8 / 16 /32 bit
#define DIDVID      0x250017F3

#define ENABLELCD   1

#define M2500LCD  	0x8000004B
#define M2500LCDEN 	0x03000000

//
// Bit definition
//
#define BIT31       0x80000000
#define BIT30       0x40000000
#define BIT29       0x20000000
#define BIT28       0x10000000
#define BIT27       0x08000000
#define BIT26       0x04000000
#define BIT25       0x02000000
#define BIT24       0x01000000
#define BIT23       0x00800000
#define BIT22       0x00400000
#define BIT21       0x00200000
#define BIT20       0x00100000
#define BIT19       0x00080000
#define BIT18       0x00040000
#define BIT17       0x00020000
#define BIT16       0x00010000
#define BIT15       0x00008000
#define BIT14       0x00004000
#define BIT13       0x00002000
#define BIT12       0x00001000
#define BIT11       0x00000800
#define BIT10       0x00000400
#define BIT9        0x00000200
#define BIT8        0x00000100
#define BIT7        0x00000080
#define BIT6        0x00000040
#define BIT5        0x00000020
#define BIT4        0x00000010
#define BIT3        0x00000008
#define BIT2        0x00000004
#define BIT1        0x00000002
#define BIT0        0x00000001

//
// our own data type
//
typedef unsigned long DWORD;
typedef DWORD* PDWORD;
typedef unsigned int WORD;
typedef unsigned char BYTE;
typedef BYTE BOOL;


#define ATTR_ADDR                   0x3C0
#define ATTR_DATA_WRITE             0x3C0
#define ATTR_DATA_READ              0x3C1
#define MISC_WRITE                  0x3C2
#define INPUT_STATUS_0_READ         0x3C2
#define VGA_ENABLE                  0x3C3
#define SEQ_INDEX                   0x3C4
#define SEQ_DATA                    0x3C5
#define PEL_MASK                    0x3C6
#define DAC_INDEX_READ              0x3C7
#define DAC_INDEX_WRITE             0x3C8
#define DAC_DATA                    0x3C9
#define FEAT_CTRL_READ              0x3CA
#define MISC_READ                   0x3CC
#define GRAPH_INDEX                 0x3CE
#define GRAPH_DATA                  0x3CF

#define MONO_CRTC_INDEX             0x3B4
#define MONO_CRTC_DATA              0x3B5
#define MONO_INPUT_STATUS1_READ     0x3BA

#define COLOR_CRTC_INDEX            0x3D4
#define COLOR_CRTC_DATA             0x3D5
#define COLOR_INPUT_STATUS1_READ    0x3DA    

#define RELATED_IO_OFFSET            (-0x380)


#define CR          0x0000
#define SR          0x0001
#define GR          0x0002
#define AR          0x0003
#define MR          0x0004
#define NR          0x00FF  // NULL register

#define SUCCESS     0x00
#define FAIL	      0x01

#define PHS         BIT1                // 1= positive H sync
#define NHS         0
#define PVS         BIT2                // 1= positive V sync
#define NVS         0
#define HB          BIT3                // 1= 1-character-wide H border
#define VB          BIT4                // 1= 8-line-wide V border
#define RBK         BIT5                // 1= Reduced Blanking
#define ROT         BIT6
#define EN_DIT      BIT7                // enable dither for 18-bit panel
#define MSB         BIT8                // MSB panel
#define _2_CH       BIT9                // 2 channel panel
#define SW_PS       BIT10               // SW power sequence

#define LCD_ID_0640x0480_1      0x01
#define LCD_ID_1024x0600_1      0x02
#define LCD_ID_0800x0480_1      0x03
#define LCD_ID_1280x1024_1      0x04

#define RR60        0

#define DISP1       1
#define DISP2       2

// clock definition
#define PLLReferenceClock           14318
#define MaxFCKVCO9003A              810000
#define MinFCKVCO9003A              350000
#define MaxFCKVCO4002A              810000
#define MinFCKVCO4002A              350000
#define MaxFCKVCO9001A              1600000
#define MinFCKVCO9001A              833000

typedef struct _DACRGB {
    BYTE R;
    BYTE G;
    BYTE B;
}DACRGB;

typedef struct _PLL_Info {
    BYTE NS;
    BYTE MS;
    BYTE RS;
}PLL_Info;

typedef struct _REG_OP {
    BYTE    RegGroup;
    BYTE    RegMask;
    BYTE    RegIndex;
    BYTE    RegShiftBit;
} REG_OP;

typedef struct _REG_PACKAGE {
    BYTE    RegGroup;
    BYTE    RegIndex;
    BYTE    RegValue;
    BYTE    RegMask;
} REG_PACKAGE;

typedef struct _RRATE_TABLE {
    DWORD   Clock;          // in khz
    BYTE    RRate_ID;
    WORD    Attribute;
    WORD    H_Total;
    WORD    H_Sync_Start;
    WORD    H_Sync_End;
    WORD    V_Total;
    WORD    V_Sync_Start;
    WORD    V_Sync_End;
} RRATE_TABLE;

typedef struct _MODE_INFO{
    WORD    H_Size;
    WORD    V_Size;
    WORD    Mode_ID_8bpp;
    WORD    Mode_ID_16bpp;
    WORD    Mode_ID_32bpp;
    RRATE_TABLE *pRRTable;
    BYTE    RRTableCount;
} MODE_INFO;

typedef struct _PANEL_TABLE {
    BYTE    Panel_ID;
    WORD    TD0;
    WORD    TD1;
    WORD    TD2;
    WORD    TD3;
    WORD    TD5;
    WORD    TD6;
    WORD    TD7;
    BYTE    PWM_Clock;
    WORD    Reserved1;
    WORD    Reserved2;
    RRATE_TABLE Timing;
} PANEL_TABLE;

typedef struct _PANEL_INFO{
    WORD    H_Size;
    WORD    V_Size;
    PANEL_TABLE *pPanelTable;
    BYTE    PanelTableCount;
} PANEL_INFO;

//
// LCD Information
// 
typedef struct _LCDINFO
{
    FILE  *fpLog;     // we share TestInfo.fpLog log pointer for write info
    WORD  wVenderID;
    WORD  wDeviceID;
    DWORD dwBus;
    DWORD dwDev;
    DWORD dwFunc;
    DWORD *pFBBase;
    DWORD dwOffset;
    DWORD *pMMIOBase;
    BYTE  *pVGAROMBase;
} LCDINFO, *pLCDINFO;

DACRGB DAC[] = {
	{0x00, 0x00, 0x00},   // Index 0
	{0x00, 0x00, 0x2a},
	{0x00, 0x2a, 0x00},
	{0x00, 0x2a, 0x2a},
	{0x2a, 0x00, 0x00},
	{0x2a, 0x00, 0x2a},
	{0x2a, 0x15, 0x00},
	{0x2a, 0x2a, 0x2a},
	{0x15, 0x15, 0x15},	
        {0x15, 0x15, 0x3f},
	{0x15, 0x3f, 0x15},
	{0x15, 0x3f, 0x3f},
	{0x3f, 0x15, 0x15},
	{0x3f, 0x15, 0x3f},
	{0x3f, 0x3f, 0x15},
	{0x3f, 0x3f, 0x3f},   // index 15
	{0x00, 0x00, 0x00},
	{0x05, 0x05, 0x05},	
        {0x08, 0x08, 0x08},
	{0x0b, 0x0b, 0x0b},
	{0x0e, 0x0e, 0x0e},
	{0x11, 0x11, 0x11},
	{0x14, 0x14, 0x14},
	{0x18, 0x18, 0x18},
	{0x1c, 0x1c, 0x1c},
	{0x20, 0x20, 0x20},
	{0x24, 0x24, 0x24},	
        {0x28, 0x28, 0x28},
	{0x2d, 0x2d, 0x2d},
	{0x32, 0x32, 0x32},
	{0x38, 0x38, 0x38},
	{0x3f, 0x3f, 0x3f},   // index 31
	{0x00, 0x00, 0x3f},
	{0x10, 0x00, 0x3f},
	{0x1f, 0x00, 0x3f},
	{0x2f, 0x00, 0x3f},
	{0x3f, 0x00, 0x3f},
	{0x3f, 0x00, 0x2f},
	{0x3f, 0x00, 0x1f},
	{0x3f, 0x00, 0x10},
	{0x3f, 0x00, 0x00},
	{0x3f, 0x10, 0x00},
	{0x3f, 0x1f, 0x00},
	{0x3f, 0x2f, 0x00},
	{0x3f, 0x3f, 0x00},	
        {0x2f, 0x3f, 0x00},
	{0x1f, 0x3f, 0x00},
	{0x10, 0x3f, 0x00},    // index 47
	{0x00, 0x3f, 0x00},
	{0x00, 0x3f, 0x10},
	{0x00, 0x3f, 0x1f},
	{0x00, 0x3f, 0x2f},
	{0x00, 0x3f, 0x3f},
	{0x00, 0x2f, 0x3f},	
        {0x00, 0x10, 0x3f},
	{0x1f, 0x1f, 0x3f},
	{0x27, 0x1f, 0x3f},
	{0x2f, 0x1f, 0x3f},
	{0x37, 0x1f, 0x3f},
	{0x3f, 0x1f, 0x3f},
	{0x3f, 0x1f, 0x37},
	{0x3f, 0x1f, 0x2f},
	{0x3f, 0x1f, 0x27},  // index 63	
        {0x3f, 0x1f, 0x1f},
	{0x3f, 0x27, 0x1f},
	{0x3f, 0x2f, 0x1f},
	{0x3f, 0x37, 0x1f},
	{0x3f, 0x3f, 0x1f},
	{0x37, 0x3f, 0x1f},
	{0x2f, 0x3f, 0x1f},
	{0x27, 0x3f, 0x1f},
	{0x1f, 0x3f, 0x1f},	
	{0x1f, 0x3f, 0x27},
	{0x1f, 0x3f, 0x2f},
	{0x1f, 0x3f, 0x37},
	{0x1f, 0x3f, 0x3f},
	{0x1f, 0x37, 0x3f},
	{0x1f, 0x2f, 0x3f},
	{0x1f, 0x27, 0x3f},  // index 79
	{0x2d, 0x2d, 0x3f},
	{0x31, 0x2d, 0x3f},	
        {0x36, 0x2d, 0x3f},
	{0x3a, 0x2d, 0x3f},
	{0x3f, 0x2d, 0x3f},
	{0x3f, 0x2d, 0x3a},
	{0x3f, 0x2d, 0x36},
	{0x3f, 0x2d, 0x31},
	{0x3f, 0x2d, 0x2d},
	{0x3f, 0x31, 0x2d},
	{0x3f, 0x36, 0x2d},	
        {0x3f, 0x3a, 0x2d},
	{0x3f, 0x3f, 0x2d},
	{0x3a, 0x3f, 0x2d},
	{0x36, 0x3f, 0x2d},
	{0x31, 0x3f, 0x2d},   // index 95
	{0x2d, 0x3f, 0x2d},
	{0x2d, 0x3f, 0x31},
	{0x2d, 0x3f, 0x36},
	{0x2d, 0x3f, 0x3a},	
        {0x2d, 0x3f, 0x3f},
	{0x2d, 0x3a, 0x3f},
	{0x2d, 0x36, 0x3f},
	{0x2d, 0x31, 0x3f},
	{0x00, 0x00, 0x1c},
	{0x07, 0x00, 0x1c},
	{0x0e, 0x00, 0x1c},
	{0x15, 0x00, 0x1c},
	{0x1c, 0x00, 0x1c},
	{0x1c, 0x00, 0x15},
	{0x1c, 0x00, 0x0e},
	{0x1c, 0x00, 0x07},    // index 111
	{0x1c, 0x00, 0x00},
	{0x1c, 0x07, 0x00},
	{0x1c, 0x0e, 0x00},
	{0x1c, 0x15, 0x00},
	{0x1c, 0x1c, 0x00},
	{0x15, 0x1c, 0x00},	
        {0x0e, 0x1c, 0x00},
	{0x07, 0x1c, 0x00},
	{0x00, 0x1c, 0x00},
	{0x00, 0x1c, 0x07},
	{0x00, 0x1c, 0x0e},
	{0x00, 0x1c, 0x15},
	{0x00, 0x1c, 0x1c},
	{0x00, 0x15, 0x1c},
	{0x00, 0x0e, 0x1c},	
        {0x00, 0x07, 0x1c},    // index 127
	{0x0e, 0x0e, 0x1c},
	{0x11, 0x0e, 0x1c},
	{0x15, 0x0e, 0x1c},
	{0x18, 0x0e, 0x1c},
	{0x1c, 0x0e, 0x1c},
	{0x1c, 0x0e, 0x18},
	{0x1c, 0x0e, 0x15},
	{0x1c, 0x0e, 0x11},	
        {0x1c, 0x0e, 0x0e},
	{0x1c, 0x11, 0x0e},
	{0x1c, 0x15, 0x0e},
	{0x1c, 0x18, 0x0e},
	{0x1c, 0x1c, 0x0e},
	{0x18, 0x1c, 0x0e},
	{0x15, 0x1c, 0x0e},
	{0x11, 0x1c, 0x0e},    // index 143
	{0x0e, 0x1c, 0x0e},	
	{0x0e, 0x1c, 0x11},
	{0x0e, 0x1c, 0x15},
	{0x0e, 0x1c, 0x18},
	{0x0e, 0x1c, 0x1c},
	{0x0e, 0x18, 0x1c},
	{0x0e, 0x15, 0x1c},
	{0x0e, 0x11, 0x1c},
	{0x14, 0x14, 0x1c},
	{0x16, 0x14, 0x1c},	
        {0x18, 0x14, 0x1c},
	{0x1a, 0x14, 0x1c},
	{0x1c, 0x14, 0x1c},
	{0x1c, 0x14, 0x1a},
	{0x1c, 0x14, 0x18},
	{0x1c, 0x14, 0x16},    // index 159
	{0x1c, 0x14, 0x14},
	{0x1c, 0x16, 0x14},
	{0x1c, 0x18, 0x14},	
        {0x1c, 0x1a, 0x14},
	{0x1c, 0x1c, 0x14},
	{0x1a, 0x1c, 0x14},
	{0x18, 0x1c, 0x14},
	{0x16, 0x1c, 0x14},
	{0x14, 0x1c, 0x14},
	{0x14, 0x1c, 0x16},
	{0x14, 0x1c, 0x18},
	{0x14, 0x1c, 0x1a},	
        {0x14, 0x1c, 0x1c},
	{0x14, 0x1a, 0x1c},
	{0x14, 0x18, 0x1c},
	{0x14, 0x16, 0x1c},  // Index 175
	{0x00, 0x00, 0x10},
	{0x04, 0x00, 0x10},
	{0x08, 0x00, 0x10},
	{0x0c, 0x00, 0x10},
	{0x10, 0x00, 0x10},
	{0x10, 0x00, 0x0c},
	{0x10, 0x00, 0x08},
	{0x10, 0x00, 0x04},
	{0x10, 0x00, 0x00},
	{0x10, 0x04, 0x00},
	{0x10, 0x08, 0x00},
	{0x10, 0x0c, 0x00},
	{0x10, 0x10, 0x00},
	{0x0c, 0x10, 0x00},	
        {0x08, 0x10, 0x00},
	{0x04, 0x10, 0x00},    // Index 191
	{0x00, 0x10, 0x00},
	{0x00, 0x10, 0x04},
	{0x00, 0x10, 0x08},
	{0x00, 0x10, 0x0c},
	{0x00, 0x10, 0x10},
	{0x00, 0x0c, 0x10},
	{0x00, 0x08, 0x10},	
        {0x00, 0x04, 0x10},
	{0x08, 0x08, 0x10},
	{0x0a, 0x08, 0x10},
	{0x0c, 0x08, 0x10},
	{0x0e, 0x08, 0x10},
	{0x10, 0x08, 0x10},
	{0x10, 0x08, 0x0e},
	{0x10, 0x08, 0x0c},
	{0x10, 0x08, 0x0a},    // Index 207	
        {0x10, 0x08, 0x08},
	{0x10, 0x0a, 0x08},
	{0x10, 0x0c, 0x08},
	{0x10, 0x0e, 0x08},
	{0x10, 0x10, 0x08},
	{0x0e, 0x10, 0x08},
	{0x0c, 0x10, 0x08},
	{0x0a, 0x10, 0x08},
	{0x08, 0x10, 0x08},
	{0x08, 0x10, 0x0a},
	{0x08, 0x10, 0x0c},
	{0x08, 0x10, 0x0e},
	{0x08, 0x10, 0x10},
	{0x08, 0x0e, 0x10},
	{0x08, 0x0c, 0x10},
	{0x08, 0x0a, 0x10},    // Index 223	
        {0x0b, 0x0b, 0x10},
	{0x0c, 0x0b, 0x10},
	{0x0d, 0x0b, 0x10},
	{0x0f, 0x0b, 0x10},
	{0x10, 0x0b, 0x10},
	{0x10, 0x0b, 0x0f},
	{0x10, 0x0b, 0x0d},
	{0x10, 0x0b, 0x0c},
	{0x10, 0x0b, 0x0b},	
        {0x10, 0x0c, 0x0b},
	{0x10, 0x0d, 0x0b},
	{0x10, 0x0f, 0x0b},
	{0x10, 0x10, 0x0b},
	{0x0f, 0x10, 0x0b},
	{0x0d, 0x10, 0x0b},
	{0x0c, 0x10, 0x0b},    // Index 239
	{0x0b, 0x10, 0x0b},
	{0x0b, 0x10, 0x0c},
	{0x0b, 0x10, 0x0d},
	{0x0b, 0x10, 0x0f},
	{0x0b, 0x10, 0x10},
	{0x0b, 0x0f, 0x10},
	{0x0b, 0x0d, 0x10},
	{0x0b, 0x0c, 0x10},
	{0x26, 0x2b, 0x2f},	
        {0x22, 0x29, 0x2f},
	{0x1e, 0x26, 0x2f},
	{0x1b, 0x24, 0x2e},
	{0x17, 0x22, 0x2e},
	{0x13, 0x1f, 0x2e},
	{0x13, 0x1f, 0x2e},
	{0x00, 0x00, 0x00}								
};

// common table fot all VESA modes on display1
REG_PACKAGE Display1VESAModeInitRegs[] = {
        // SR
        {SR, 0x00, 0x03, 0xFF},//SR00
        {SR, 0x01, 0x01, ~BIT5},//SR01 reserve BIT5
        {SR, 0x02, 0x0F, 0xFF},
        {SR, 0x03, 0x00, 0xFF},
        {SR, 0x04, 0x0E, 0xFF},
        // CR
        {CR, 0x05, 0x00, BIT6+BIT5},// CR05[6:5]
        {CR, 0x08, 0x00, 0x7F},// CR08[6:0]
        {CR, 0x09, 0x00, 0x9F},// CR09[7,4:0]
        {CR, 0x17, 0x23, 0x7F},//CR17[6:0]
        {CR, 0xA0, 0x70, BIT6+BIT5+BIT4},//CRA0[6:4]
        {CR, 0xAE, 0x80, BIT7},//CRAE[7] line compare
        {CR, 0xA8, 0x00, BIT1},//CRA8[2] Gamma Enable
        // GR
        {GR, 0x06, 0x05, 0xFF},
        // End
        {NR, 0x00, 0x00, 0x00}// End
};

REG_PACKAGE ExtendRegs[] = {
        // SR
        {SR, 0x11, 0x00, 0xFF},     //Power Sequence Control Signal #1
        {SR, 0x30, 0x00, 0xFF},     // PWM level indicator
        
        // CR
        {CR, 0x03, 0x80, 0xF0},     // Open 0x3x5.10 0x3x5.11 read back
        {CR, 0x33, 0x71, 0xFF},     // clear Enhanced Color Mode, disable Rest, set Screen off
        {CR, 0x0C, 0x00, 0xFF},     // clear Disp1 Starting Address Medium Register[8~15]
        {CR, 0x0D, 0x00, 0xFF},     // clear Disp1 Starting Address Low Register[0~7]
        {CR, 0xB0, 0x00, 0xFF},     // clear Disp1 Starting Address [6] Register[24]
        {CR, 0xAF, 0x00, 0xFF},     // clear Disp1Starting Address High Register[16~23] 
        {CR, 0x17, 0x80, 0xFF},     // Enable H & V Sync
        {CR, 0x36, 0x00, 0xFF},     // clear Disp2 Starting Address Low Register[0~7]
        {CR, 0x37, 0x00, 0xFF},     // clear Disp2 Starting Address Medium Register[8~15]
        {CR, 0x38, 0x00, 0xFF},     // clear Disp2 Starting Address High Register[16~23]
        {CR, 0x3B, 0x00, 0xFF},     // clear Disp2 Starting Address [6] Register[24]        
        {CR, 0x82, 0x01, 0xFF},     // set display1 setting changed
        {CR, 0xA3, 0x00, 0xFF},     // clear Enhanced Color Mode, disable DVP1/DVP2/VGA Pad
        {CR, 0xA4, 0x00, 0xFF},     // Misc. Control Register
        {CR, 0xA5, 0x00, 0xFF},     // Segmented Memory Address Overflow Register
        // SR
        {SR, 0x01, 0x20, BIT5},                    // set Screen off
        {SR, 0x2F, 0x07, BIT2+BIT1+BIT0},          // Enable Backlight PWM
        {SR, 0x30, 0xFF, 0xFF},                   // Set Backlight to 100% 
        {SR, 0x31, 0x00, BIT3+BIT2+BIT1+BIT0},     // disable mask sync and DE
        {SR, 0x32, 0x01, BIT1+BIT0},               // Disable Power Sequence Control Pad, enable Power Sequence Control Bypass 
        {SR, 0x50, 0x08, 0x1F},                    // Second Display scaling control
        {SR, 0x58, 0x08, 0x1F},                    // first Display scaling control
        // CR
        {CR, 0x3E, 0x00, BIT1+BIT0},               // DPMS on
        {CR, 0xA8, 0x80, BIT7+BIT4},               // Disable VGA analog Pad, enable LUT mask function
        {CR, 0xB4, 0x01, BIT0},                    // Power on LCLK PLL
        {CR, 0xB6, 0x28, BIT5+BIT3+BIT1+BIT0},     // Power on MCLK PLL, DCLK PLL, DPMS on
        {CR, 0xBD, 0x00, BIT2+BIT1+BIT0},          // GPLL:MP (spread spectrum)
        {CR, 0xBF, 0x00, BIT2+BIT1+BIT0},          // LCKPLL:MP (spread spectrum)
        {CR, 0xC1, 0x00, BIT2+BIT1+BIT0},          // DCKPLL:MP (spread spectrum)
        {CR, 0xD9, 0x00, BIT2+BIT1+BIT0},          // MPLL:MP (spread spectrum)
        {CR, 0xD0, 0x00, BIT5+BIT3},               // disable stop DCLK/LCLK
        {NR, 0x00, 0x00, 0x00}// End
};

REG_PACKAGE ExtendRAMRegs[] = {
	// CR
	{CR, 0xCE, 0x02, 0xFF}, 	
	{CR, 0xBF, 0x18, 0xFF}, 	
	{CR, 0xBE, 0x6D, 0xFF}, 	
	{CR, 0xBB, 0x07, 0xFF}, 	
	{CR, 0x40, 0x00, 0xFF}, 	
	{CR, 0x40, 0x20, 0xFF}, 	
	{CR, 0x41, 0x98, 0xFF}, 	
	{CR, 0xBB, 0x00, 0xFF}, 	
};

// Display 1 H total
REG_OP HTotal1[] = {
            {SR,BIT2+BIT1+BIT0,0x33,0},   // low 3 bits
            {CR, 0xFF, 0x00,3},                 // [7:0]
            {CR, BIT0, 0xAC,11},                  // [8]
            {NR,0x0,0x0,0x0}
};

// Display 1 H DispEnd
REG_OP HDispEnd1[] = {
            {SR, BIT6+BIT5+BIT4, 0x33,0},
            {CR, 0xFF, 0x01,3},
            {CR, BIT2, 0xAC,11},
            {NR,0x0,0x0,0x0}
};

// Display 1 H BnkSt
REG_OP HBnkSt1[] = {
            {SR, BIT2+BIT1+BIT0, 0x34,0},
            {CR, 0xFF, 0x02,3},
            {CR, BIT4, 0xAC,11},
            {NR,0x0,0x0,0x0}
};

// Display 1 H BnkEnd
REG_OP HBnkEnd1[] = {
            {SR, BIT6+BIT5+BIT4, 0x34,0},
            {CR, 0x1F, 0x03,3},
            {CR, BIT7, 0x05,8},
            {CR, BIT0, 0xAD,9},
            {NR,0x0,0x0,0x0}
};

// Display 1 H SyncSt
REG_OP HSyncSt1[] = {
            {SR, BIT2+BIT1+BIT0, 0x35,0},
            {CR, 0xFF, 0x04,3},
            {CR, BIT6, 0xAC,11},
            {NR,0x0,0x0,0x0}
};

// Display 1 H SyncEnd
REG_OP HSyncEnd1[] = {
            {SR, BIT6+BIT5+BIT4, 0x35,0},
            {CR, 0x1F, 0x05,3},
            {CR, BIT2, 0xAD,8},
            {NR,0x0,0x0,0x0}
};

// Display 1 V Total
REG_OP VTotal1[] = {
            {CR, 0xFF, 0x06,0},
            {CR, BIT0, 0x07,8},
            {CR, BIT5, 0x07,9},
            {CR, BIT0, 0xAE,10},
            {NR,0x0,0x0,0x0}
};

// Display 1 V DispEnd
REG_OP VDispEnd1[] = {
            {CR, 0xFF, 0x12,0},
            {CR, BIT1, 0x07,8},
            {CR, BIT6, 0x07,9},
            {CR, BIT1, 0xAE,10},
            {NR,0x0,0x0,0x0}
};

// Display 1 V BnkSt
REG_OP VBnkSt1[] = {
            {CR, 0xFF, 0x15,0},
            {CR, BIT3, 0x07,8},
            {CR, BIT5, 0x09,9},
            {CR, BIT2, 0xAE,10},
            {NR,0x0,0x0,0x0}
};

// Display 1 V BnkEnd
REG_OP VBnkEnd1[] = {
            {CR, 0xFF, 0x16,0},
            {CR, BIT4, 0xAE,8},
            {NR,0x0,0x0,0x0}
};

// Display 1 V SyncSt
REG_OP VSyncSt1[] = {
             {CR, 0xFF, 0x10,0},
             {CR, BIT2, 0x07,8},
             {CR, BIT7, 0x07,9},
             {CR, BIT3, 0xAE,10},
             {NR,0x0,0x0,0x0}
};

// Display 1 V SyncEnd
REG_OP VSyncEnd1[] = {
             {CR, BIT3+BIT2+BIT1+BIT0, 0x11,0},
             {CR, BIT6+BIT5, 0xAE,4},
             {NR,0x0,0x0,0x0}
};

// Display 1 Pitch
REG_OP Pitch1[] = {
             {CR, 0xFF, 0x13,0},
             {CR, 0x3F, 0xB0,8},
             {NR, 0x00, 0x00,0x0}
};

PANEL_TABLE PanelTable1280x1024[] = {
    {LCD_ID_1280x1024_1, 200, 25, 210, 25, 25, 210, 25, 0, 0, 0, {54000, RR60, PHS+PVS+EN_DIT+MSB+EN_DIT, 1460, 1300, 1380, 1046, 1031, 1040}}
};

PANEL_TABLE PanelTable1024x0600[] = {
    {LCD_ID_1024x0600_1, 600, 50, 300, 0, 300, 0, 50, 0, 0, 0, {45000, RR60, PHS+PVS+EN_DIT+MSB+EN_DIT, 1200, 1083, 1142, 625, 608, 616}}
};

PANEL_TABLE PanelTable0800x0480[] = {
    {LCD_ID_0800x0480_1, 200, 25, 210, 25, 25, 210, 25, 0, 0, 0, {25000, RR60, PHS+PVS+EN_DIT+MSB+EN_DIT, 896, 808, 848, 504, 484, 488}}
};

PANEL_TABLE PanelTable0640x0480[] = {      
        {LCD_ID_0640x0480_1, 1050, 70, 10, 200, 200, 10, 25, 0, 0, 0, {25175, RR60, NHS+NVS+EN_DIT+MSB+EN_DIT, 800,  656,  686,  525,  490,  493}}
};

#define LCD_TABLE_LEN    (4) // change it if extern any LCDTable list
PANEL_INFO LCDTable[] = {
        {1280, 1024, PanelTable1280x1024, sizeof(PanelTable1280x1024)/sizeof(PANEL_TABLE)}, 
        {1024, 600,  PanelTable1024x0600, sizeof(PanelTable1024x0600)/sizeof(PANEL_TABLE)}, 
        {800,  480,  PanelTable0800x0480, sizeof(PanelTable0800x0480)/sizeof(PANEL_TABLE)}, 
        {640,  480,  PanelTable0640x0480, sizeof(PanelTable0640x0480)/sizeof(PANEL_TABLE)}
};
